// Mocks generated by Mockito 5.1.0 from annotations
// in number_trivia_app_tdd/test/features/number_trivia_feature/presentation/number_trivia_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:number_trivia_app_tdd/core/errors/failures.dart' as _i5;
import 'package:number_trivia_app_tdd/core/presentation/utils/input_converter.dart'
    as _i4;
import 'package:number_trivia_app_tdd/core/use_case/use_case.dart' as _i10;
import 'package:number_trivia_app_tdd/features/get_number_trivia/domain/entities/number_trivia_entitiy.dart'
    as _i8;
import 'package:number_trivia_app_tdd/features/get_number_trivia/domain/repositories/number_trivia_repositoriy.dart'
    as _i3;
import 'package:number_trivia_app_tdd/features/get_number_trivia/domain/use_cases/concret_number_trivia_use_case.dart'
    as _i6;
import 'package:number_trivia_app_tdd/features/get_number_trivia/domain/use_cases/randome_number_trivia_use_case.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeNumberTriviaDomainRepository_1 extends _i1.Fake
    implements _i3.NumberTriviaDomainRepository {}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i4.InputConverter {
  MockInputConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Either<_i5.InputFailure, int> inputConverter(String? input) =>
      (super.noSuchMethod(Invocation.method(#inputConverter, [input]),
              returnValue: _FakeEither_0<_i5.InputFailure, int>())
          as _i2.Either<_i5.InputFailure, int>);
}

/// A class which mocks [ConcreteNumberTriviaUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockConcreteNumberTriviaUseCase extends _i1.Mock
    implements _i6.ConcreteNumberTriviaUseCase {
  MockConcreteNumberTriviaUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.NumberTriviaDomainRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue: _FakeNumberTriviaDomainRepository_1())
          as _i3.NumberTriviaDomainRepository);
  @override
  _i7.Future<_i2.Either<_i5.Failure, _i8.NumberTriviaEntity>> call(
          _i6.ConcreteNumberParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i8.NumberTriviaEntity>>.value(
                      _FakeEither_0<_i5.Failure, _i8.NumberTriviaEntity>()))
          as _i7.Future<_i2.Either<_i5.Failure, _i8.NumberTriviaEntity>>);
}

/// A class which mocks [RandomNumberTriviaUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRandomNumberTriviaUseCase extends _i1.Mock
    implements _i9.RandomNumberTriviaUseCase {
  MockRandomNumberTriviaUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.NumberTriviaDomainRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue: _FakeNumberTriviaDomainRepository_1())
          as _i3.NumberTriviaDomainRepository);
  @override
  _i7.Future<_i2.Either<_i5.Failure, _i8.NumberTriviaEntity>> call(
          _i10.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i8.NumberTriviaEntity>>.value(
                      _FakeEither_0<_i5.Failure, _i8.NumberTriviaEntity>()))
          as _i7.Future<_i2.Either<_i5.Failure, _i8.NumberTriviaEntity>>);
}
